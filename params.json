{"name":"Angular-cakephp","tagline":"An AngularJS data modelling framework that ties in with a CakePHP REST API","body":"# angular-cakephp\r\n\r\n## Dependencies\r\nangular-cakephp depends on [AngularJS](https://github.com/angular/angular.js), and [Lodash](https://github.com/lodash/lodash)\r\n\r\n## Installation\r\n\r\n```js\r\nbower install angular-cakephp --save\r\n```\r\n```html\r\n<script src='bower_components/angular-cakephp/dist/angular-cakephp.min.js'></script>\r\n```\r\n\r\n## Getting Started\r\n\r\n##### Set module settings\r\n\r\n```js\r\nangular.module('AngularCakePHP')\r\n    // required - the base url to the api\r\n    .value('AngularCakePHPApiUrl', 'http://example.com/api')\r\n    // optional - will run if no model api_endpoint is explicitly set\r\n    // takes a function that should return the api_endpoint\r\n    .value('AngularCakePHPApiEndpointTransformer', function(value) {\r\n        return value + 's';\r\n    })\r\n    // can be external library like pluralize\r\n    .value('AngularCakePHPApiEndpointTransformer', pluralize)\r\n    // optional - function to transform the url params of an index, view or GET api query. Must return an array of url params eg. [limit: 2, page: 4, search: 'name']\r\n    .value('AngularCakePHPUrlParamTransformer', function(params) {\r\n        return params;\r\n    });\r\n```\r\n\r\n##### Create a model\r\n\r\n```js\r\n(function() {\r\n    'use strict';\r\n\r\n    var UserModel = function(BaseModel) {\r\n\r\n        function UserModel() {\r\n\t\t\tthis.config = {\r\n                // the resource to hit that will be appended to the AngularCakePHPApiUrl (i.e. http://example.com/api/users)\r\n                // if left blank it will snake case the model class name (e.g. SpecialUser becomes special_user). If you then need to modify the automatic api_endpoint you can use the AngularCakePHPApiEndpointTransformer setting.\r\n\t\t\t\tapi_endpoint: 'users'\r\n\t\t\t};\r\n\t\t}\r\n\r\n        function User(data) {\r\n            this.id        = data.id;\r\n            this.firstname = data.firstname;\r\n            this.lastname  = data.lastname;\r\n            this.dob       = data.dob;\r\n\r\n            // creates a field that is read-only and automatically updates\r\n            this.virtualField('name', function() {\r\n                return this.firstname + ' ' + this.lastname;\r\n            });\r\n        }\r\n\r\n        return BaseModel.extend(UserModel, User);\r\n    };\r\n\r\n    UserModel.$inject = ['AngularCakePHPBaseModel'];\r\n\r\n    angular.module('App').factory('UserModel', UserModel);\r\n})();\r\n```\r\n\r\n##### Using the model\r\nFor more information see [API.md](https://github.com/Intellipharm/angular-cakephp/blob/master/API.md)\r\n\r\n```js\r\n(function() {\r\n    'use strict';\r\n\r\n    var AppCtrl = function($scope, UserModel) {\r\n        // creates a new local active record\r\n        $scope.User = UserModel.new({\r\n            firstname: 'Goeffry',\r\n            lastname: 'Rush'\r\n        });\r\n\r\n        // gets a list of items\r\n        UserModel.index({page: 2}).then(function(Users) {\r\n            $scope.Users = Users;\r\n        });\r\n\r\n        // gets a single item\r\n        UserModel.view(1, {contain: 'Comments'}).then(function(User) {\r\n            $scope.User = User;\r\n        });\r\n\r\n        // adds an item\r\n        UserModel.add({\r\n            firstname: 'Mike',\r\n            surname: 'Myers'\r\n        }).then(function(User) {\r\n            $scope.User = User;\r\n        });\r\n\r\n        // edits an existing item\r\n        UserModel.edit(1, {\r\n            firstname: 'Michael',\r\n            lastname: 'Buble'\r\n        }).then(function(User) {\r\n            $scope.User = User;\r\n        });\r\n\r\n        // deletes an item\r\n        UserModel.delete(1).then(function() {\r\n            $scope.User = null;\r\n        });\r\n\r\n        // calls a validation method on the api for the model. This runs the CakePHP model validation without changing anything in the database. This reduces the client side validation. For more information see [validation](https://github.com/Intellipharm/angular-cakephp/blob/master/VALIDATE.md)\r\n        UserModel.validate({\r\n            firstname: 'Jack',\r\n            lastname: 'Daniels',\r\n            dob: 1234\r\n        }, [\r\n            'dob'\r\n        ]).then(function() {\r\n            $scope.User = null;\r\n        });\r\n\r\n        // calls a custom method for the model\r\n        UserModel.api('my_custom_api_method', {}, 'POST').then(function() {\r\n            $scope.User = null;\r\n        });\r\n   };\r\n\r\n    AppCtrl.$inject = ['$scope', 'UserModel'];\r\n\r\n    angular.module('App').controller('AppCtrl', AppCtrl);\r\n})();\r\n```\r\n\r\n##### Using the active record\r\nFor more information see [API.md](https://github.com/Intellipharm/angular-cakephp/blob/master/API.md)\r\n\r\n```js\r\n(function() {\r\n    'use strict';\r\n\r\n    var AppCtrl = function($scope, UserModel) {\r\n        // After getting an Active Record then you can call some of it's own functions\r\n        $scope.User = UserModel.new({\r\n            firstname: 'Ian',\r\n            surname: 'Mckellen'\r\n        });\r\n\r\n        // create a new local active record. Alias of model.new()\r\n        $scope.NewUser = $scope.User.new({\r\n            firstname: 'Heath',\r\n            surname: 'Ledger'\r\n        });\r\n\r\n        // update a value\r\n        $scope.User.firstname = 'Sean'\r\n        $scope.User.lastname = 'Bean';\r\n\r\n        // get a virtual field\r\n        console.log($scope.User.name); // This would return 'Sean Bean'\r\n\r\n        // saves the changes to the database. If no id exists then it calls model.add, but if id does exist it calls model.edit\r\n        $scope.User.save().then(function() {});\r\n\r\n        // deletes the item. Alias of model.delete()\r\n        $scope.User.delete().then(function() {});\r\n\r\n        // validates the item. Alias of model.validate()\r\n        $scope.User.validate().then(function() {});\r\n        \r\n        // gets the class name of the model. In this case it would return 'User'\r\n        var modelName = $scope.User.getClassName();\r\n    };\r\n\r\n    AppCtrl.$inject = ['$scope', 'UserModel'];\r\n\r\n    angular.module('App').controller('AppCtrl', AppCtrl);\r\n})();\r\n\r\n```\r\n\r\n\r\n## Inspiration\r\nInspiration taken from\r\n  * [restangular](https://github.com/mgonto/restangular)\r\n  * [ngActiveResource](https://github.com/FacultyCreative/ngActiveResource)\r\n  * [ember-data](https://github.com/emberjs/data)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}